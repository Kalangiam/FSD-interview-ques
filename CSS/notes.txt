1. What is Box Model?
    In CSS, the term "box model" is used when talking about design and layout.The CSS box model is essentially a box that wraps around every HTML element. It consists of: content, padding, borders and margins. The image below illustrates the box model:
        Content - The content of the box, where text and images appear
        Padding - Clears an area around the content. The padding is transparent
        Border - A border that goes around the padding and content
        Margin - Clears an area outside the border. The margin is transparent

2. Flex Box ?
    Flexbox, short for Flexible Box Layout, is a CSS layout model that provides a more efficient way to distribute space and align items within a container, even when their size is unknown or dynamic. It allows you to design complex layouts with a predictable and intuitive structure. Flexbox consists of flex containers and flex items:

    -Flex Container: Any container with its display property set to flex or inline-flex becomes a flex container. It enables a flex context for its direct children, known as flex items. Properties applied to the flex container affect how its children are laid out.

    -Flex Items: These are the direct children of a flex container. They can be laid out in any direction (row or column) and can also be reordered and resized dynamically. Properties applied to flex items control how they behave within the flex container.

    block - flex - inline-flex

    display: block: Creates a block-level element that occupies the entire width available and starts on a new line.
    display: flex: Creates a flex container, enabling flex layout for its children. Flex items can be arranged horizontally or vertically and dynamically adjust their size.
    display: inline-flex: Creates an inline-level flex container, allowing it to be placed inline with other content horizontally while still maintaining flex layout behavior.

    Flex Container Properties
    --------------------------

    1. flex-direction : column, row
    2. flex wrap : nowrap - single line
       flex wrap : wrap - next line
    3. justify-content : center, flex-start, flex-end, space-between, space-around, space-evenly (horizontally moves)
    4. align-items : center, flex-start, flex-end, (vertically moves)
    3. align-content : center, flex-start, flex-end, (overall content)
    4. align-self : center, start, end - <div style="align-self: end">3</div>
        
        Difference between align-items and align-content

        align-items: Aligns flex items individually along the cross axis of the flex container.
        align-content: Aligns the entire content of the flex container along the cross axis when there is extra space available.
    
    Flex items Properties
    --------------------------
    1. order - <div style="order: 3">1</div> -The order property specifies the order of the flex items.
    2.flex-grow - Make the third flex item grow eight times faster than the other flex items :
         <div style="flex-grow: 1">2</div>
         <div style="flex-grow: 3">3</div>
    3. flex- shrink - <div style="flex-shrink: 0">3</div> -Do not let the third flex item shrink as much as the other flex items:
    4. flex-basis -   <div style="flex-basis:250px">3</div> - Set the initial length of the third flex item to 200 pixels:

3. pseudo - classes?
   - a:link
   - a:hover
   - a:active
   - a:visited
   - p:first-child

4. pseudo - elements ?
    A CSS pseudo-element is used to style specified parts of an element.
    For example, it can be used to:
    Style the first letter, or line, of an element
    Insert content before, or after, the content of an element
    example -p::first-line {
            color: #ff0000;
            font-variant: small-caps;
}

5. Grid 
    display:grid, inline-grid
    grid-template-columns : auto auto (2 columns)
    grid-template-rows :auto auto (2 rows)
    column-gap, row-gap, gap
    grid-column-start, grid-column-end :1,3
    grid-row-start, grid-row-end :1,3
    grid-row ,grid-column : 1 / 3 (or) 1 / span 2
    grid-area : grid-row-start / grid-column-start / grid-row-end / grid-column-end.

7. CSS overflow 
    visible - Default. The overflow is not clipped. The content renders outside the element's box
    hidden - The overflow is clipped, and the rest of the content will be invisible
    scroll - The overflow is clipped, and a scrollbar is added to see the rest of the content
    auto - Similar to scroll, but it adds scrollbars only when necessary

8. CSS Media Queries
    The @media rule, introduced in CSS2, made it possible to define different style rules for different media types.
    Media queries in CSS3 extended the CSS2 media types idea: Instead of looking for a type of device, they look at the capability of the device.
    Media queries can be used to check many things, such as:
    width and height of the viewport
    orientation of the viewport (landscape or portrait)
    resolution
    Using media queries are a popular technique for delivering a tailored style sheet to desktops, laptops, tablets, and mobile phones (such as iPhone and Android phones).